Reflections from lesson 2 of how to use git and github course on udacity

What happens when you initialise a repository? Why do you need to do it?

When you initialise a repository, you are telling the git vcs that you will be tracking changes in 
this folder. Hence, git will track the history of the files and store them in the .git folder which
is created when you run "git init". You need to do this so that git can start tracking the file 
history!

How is the staging area different from the working directory and the repository? What value do you
think it offers?

The staging area is different because it holds potential commits instead of files like the working
directory. It differs from the repository because these are not actual commits but more like 
pre-commits. The advantage this offers is that I can choose which files to have in a commit so that
the commit can reflect a logical change I have made in more than one file. Also, I can add and 
remove files as I'd like which makes the tracking process easier!

How can you use the staging area to make sure you have one commit per logical change?

You can ensure one commit per logical change by using git status to see what files are in the 
staging area and git diff to compare changes between the working directory and staging area. This wll
allow me to see what has changed so that I can make sure that the amount of change corresponds to 
one logical change for the commit I want to make.

What are some situations when branches would be helpful in keeping your history organized? How 
would branches help?

Some situations include when I want to test out new features without impacting the progress that I 
have made on the main code. This would be especially crucial if the project involved multiple parts 
since I would need to be able to work on those parts and test they work before merging them into the 
main stable code. Branches would help since different teams could work on different branches and 
then we could then integrate the changes and therefore progress the greatness of the main master 
branch code.

How do the diagrams help you visualize the branch structure?

Diagrams help by displaying commits and branches in an easily understandable structure. Making the 
structure visual helps me to understand how various commits are linked, how and when new branches 
developed and makes it easy to see what changes have occured throughout the repository.

What is the result of merging two branches together? Why do we represent it in the diagram the way 
we do?

The result of merging two branches is one branch which contains the commits representing changes 
that have been made to both branches beginning from the common ancestor commit they both share. We 
represent it in the diagram so that we can easily see how the parent feature of commits influences 
how the merge is carried out. 
Useful commands:

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

The pros of Git's automatic merging vs manually merging are that it allows efficient collaboration 
when teams are working on different features of a codebase. These can easily be integrated together.
Doing this manually would be laborious as the size of the codebase and the number of developers 
increased. The cons are that automatic merging is not intelligent enough to merge conflicts when the
same piece of code has been changed by two different people. In this instance, manual merging has 
the advantage of contextual information which allows collaborators to choose which changes are 
acceptable.


